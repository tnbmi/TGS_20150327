//*****************************************************************************
//
// CDustAIAIクラス [dustAI.cpp]
// Author : YUJI MOMOI
//
//*****************************************************************************

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルードファイル
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include "dustAI.h"
#include "dust.h"

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// マクロ定義
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//=============================================================================
// コンストラクタ
//=============================================================================
CDustAI::CDustAI()
{
}

//=============================================================================
// 生成
//=============================================================================
CDustAI* CDustAI::Create(CDust* pDust)
{
	CDustAI* pointer = new CDustAI;
	pointer->Init(pDust);
	return pointer;
}

//=============================================================================
// 初期化
//=============================================================================
HRESULT CDustAI::Init(CDust* pDust)
{
	SetDust(pDust);

	return S_OK;
}

//=============================================================================
// 終了
//=============================================================================
void CDustAI::Uninit(void)
{
}

//=============================================================================
// 更新
//=============================================================================
void CDustAI::Update(void)
{
	CScene* pScene = NULL;
	D3DXVECTOR3 front = m_dust->GetFrontVector();
	D3DXVECTOR3 right = m_dust->GetRightVector();
	D3DXVECTOR3 vecTarget;
	bool endFlag = false;

	for(int cnt = 0; cnt < PRIORITY_MAX; ++cnt)
	{
		pScene = CScene::GetTop(cnt);

		while(pScene != NULL)
		{
			if(pScene->GetType() == CScene::OBJTYPE_WALL)
			{
				// 壁判定
				vecTarget = pScene->GetPos() - m_dust->GetPos();
				float length = D3DXVec3Length(&vecTarget);

				// 前
				if(vecTarget == front)
				{
					// 正面が壁なら
					if(length < (m_dust->GetSize().z / 2))
					{
						// 左右を調べていける方に曲がる
						endFlag = true;
					}
				}

				// 右
				if(vecTarget == right && !endFlag)
				{
				}

				// 左
			}
		}
	}
}